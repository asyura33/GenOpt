%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 61 337 553 456
%%Creator: epsConverter 1.3.2%%For: (Martin Gelbaum)%%Title: (Logo.1.96.eps.art)%%CreationDate: (6/3/96) (3:36 PM)%%PageOrigin: 30 31
%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_IllustratorA_AI5 1.0 0
%AI5_FileFormat 1.2
%AI3_ColorUsage: Black&White
%AI3_DocumentPreview: None
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.0 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.0 
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 21 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch aload pop pop
			4
			{
				4 index mul 4 1 roll
			} repeat
			5 -1 roll pop
			setcmykcolor
		}
		def
	} if
	
	/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
	level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI5_vars 70 dict dup begin
put
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_IllustratorA_AI5 74 dict dup begin
put
/initialize
{
	Adobe_IllustratorA_AI5 dup begin
	Adobe_IllustratorA_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_IllustratorA_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			clip /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore clip newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore clip newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore clip newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		fill
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef clip
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
			
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
currentdict readonly pop
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_IllustratorA_AI5 /initialize get exec
%%EndSetup
0.000 0.000 0.000 1.000 k
1.000 i
247.904 373.143 m
256.479 373.143 l
256.479 371.713 l
249.853 371.713 l
249.853 369.845 l
253.718 369.845 l
253.718 368.416 l
249.853 368.416 l
249.853 366.337 l
256.560 366.337 l
256.560 364.762 l
247.904 364.762 l
247.904 373.143 l
f
*u
260.191 371.632 m
266.379 371.632 l
267.484 371.632 267.987 371.258 267.987 370.300 c
267.987 368.676 l
267.987 367.734 267.484 367.360 266.379 367.360 c
265.437 367.360 l
268.702 364.762 l
266.298 364.762 l
263.423 367.360 l
261.848 367.360 l
261.848 364.762 l
260.191 364.762 l
260.191 371.632 l
f
261.848 370.446 m
261.848 368.546 l
265.665 368.546 l
266.168 368.546 266.428 368.644 266.428 369.098 c
266.428 369.894 l
266.428 370.349 266.168 370.446 265.665 370.446 c
261.848 370.446 l
f
*U
271.406 371.632 m
272.560 371.632 l
278.390 367.068 l
278.390 371.632 l
279.901 371.632 l
279.901 364.762 l
278.748 364.762 l
272.933 369.391 l
272.933 364.762 l
271.406 364.762 l
271.406 371.632 l
f
283.617 371.632 m
290.991 371.632 l
290.991 370.414 l
285.306 370.414 l
285.306 368.920 l
288.620 368.920 l
288.620 367.734 l
285.306 367.734 l
285.306 366.045 l
291.072 366.045 l
291.072 364.762 l
283.617 364.762 l
283.617 371.632 l
f
295.759 370.398 m
295.759 368.952 l
300.225 368.952 l
301.589 368.952 302.012 368.627 302.012 367.328 c
302.012 366.386 l
302.012 365.103 301.589 364.762 300.225 364.762 c
295.759 364.762 l
294.394 364.762 293.956 365.103 293.956 366.386 c
293.956 366.581 l
295.450 366.857 l
295.450 366.045 l
300.501 366.045 l
300.501 367.620 l
296.051 367.620 l
294.703 367.620 294.248 367.945 294.248 369.245 c
294.248 370.008 l
294.248 371.307 294.703 371.632 296.051 371.632 c
300.128 371.632 l
301.394 371.632 301.930 371.340 301.930 370.138 c
301.930 369.975 l
300.485 369.667 l
300.485 370.398 l
295.759 370.398 l
f
309.653 364.762 m
307.980 364.762 l
307.980 370.398 l
304.667 370.398 l
304.667 371.632 l
312.982 371.632 l
312.982 370.398 l
309.653 370.398 l
309.653 364.762 l
f
*u
325.241 373.143 m
331.413 373.143 l
332.988 373.143 333.492 372.736 333.492 371.161 c
333.492 366.743 l
333.492 365.168 332.988 364.762 331.413 364.762 c
325.241 364.762 l
323.665 364.762 323.162 365.168 323.162 366.743 c
323.162 371.161 l
323.162 372.736 323.665 373.143 325.241 373.143 c
f
331.543 366.337 m
331.543 371.648 l
325.111 371.648 l
325.111 366.337 l
331.543 366.337 l
f
*U
*u
337.643 371.632 m
343.831 371.632 l
344.936 371.632 345.439 371.258 345.439 370.300 c
345.439 368.676 l
345.439 367.734 344.936 367.360 343.831 367.360 c
342.889 367.360 l
346.154 364.762 l
343.750 364.762 l
340.875 367.360 l
339.300 367.360 l
339.300 364.762 l
337.643 364.762 l
337.643 371.632 l
f
339.300 370.446 m
339.300 368.546 l
343.117 368.546 l
343.620 368.546 343.880 368.644 343.880 369.098 c
343.880 369.894 l
343.880 370.349 343.620 370.446 343.117 370.446 c
339.300 370.446 l
f
*U
348.858 371.632 m
350.548 371.632 l
350.548 366.045 l
355.940 366.045 l
355.940 364.762 l
348.858 364.762 l
348.858 371.632 l
f
*u
361.513 371.632 m
363.120 371.632 l
367.262 364.762 l
365.378 364.762 l
364.517 366.272 l
359.970 366.272 l
359.109 364.762 l
357.436 364.762 l
361.513 371.632 l
f
363.835 367.523 m
362.227 370.381 l
360.684 367.523 l
363.835 367.523 l
f
*U
369.615 371.632 m
370.768 371.632 l
376.599 367.068 l
376.599 371.632 l
378.110 371.632 l
378.110 364.762 l
376.957 364.762 l
371.142 369.391 l
371.142 364.762 l
369.615 364.762 l
369.615 371.632 l
f
*u
381.826 371.632 m
386.455 371.632 l
389.167 371.632 390.580 370.349 390.580 368.221 c
390.580 365.899 389.053 364.762 386.033 364.762 c
381.826 364.762 l
381.826 371.632 l
f
385.675 366.045 m
387.803 366.045 388.859 366.516 388.859 368.302 c
388.859 369.732 388.063 370.398 386.471 370.398 c
383.515 370.398 l
383.515 366.045 l
385.675 366.045 l
f
*U
*u
395.379 371.632 m
400.690 371.632 l
402.038 371.632 402.477 371.323 402.477 370.008 c
402.477 366.386 l
402.477 365.087 402.038 364.762 400.690 364.762 c
395.379 364.762 l
394.015 364.762 393.593 365.087 393.593 366.386 c
393.593 370.008 l
393.593 371.323 394.031 371.632 395.379 371.632 c
f
400.804 366.077 m
400.804 370.365 l
395.266 370.365 l
395.266 366.077 l
400.804 366.077 l
f
*U
413.567 373.143 m
415.516 373.143 l
415.516 366.337 l
421.801 366.337 l
421.801 364.762 l
413.567 364.762 l
413.567 373.143 l
f
*u
427.729 371.632 m
429.337 371.632 l
433.479 364.762 l
431.595 364.762 l
430.734 366.272 l
426.186 366.272 l
425.326 364.762 l
423.653 364.762 l
427.729 371.632 l
f
430.052 367.523 m
428.444 370.381 l
426.901 367.523 l
430.052 367.523 l
f
*U
434.890 371.632 m
436.644 371.632 l
438.447 366.841 l
440.380 371.632 l
441.533 371.632 l
443.449 366.841 l
445.220 371.632 l
446.730 371.632 l
443.969 364.762 l
442.832 364.762 l
440.851 369.618 l
438.837 364.762 l
437.684 364.762 l
434.890 371.632 l
f
*u
449.304 371.632 m
455.492 371.632 l
456.596 371.632 457.100 371.258 457.100 370.300 c
457.100 368.676 l
457.100 367.734 456.596 367.360 455.492 367.360 c
454.550 367.360 l
457.815 364.762 l
455.411 364.762 l
452.536 367.360 l
450.961 367.360 l
450.961 364.762 l
449.304 364.762 l
449.304 371.632 l
f
450.961 370.446 m
450.961 368.546 l
454.777 368.546 l
455.281 368.546 455.541 368.644 455.541 369.098 c
455.541 369.894 l
455.541 370.349 455.281 370.446 454.777 370.446 c
450.961 370.446 l
f
*U
460.519 371.632 m
467.893 371.632 l
467.893 370.414 l
462.208 370.414 l
462.208 368.920 l
465.522 368.920 l
465.522 367.734 l
462.208 367.734 l
462.208 366.045 l
467.974 366.045 l
467.974 364.762 l
460.519 364.762 l
460.519 371.632 l
f
471.036 371.632 m
472.190 371.632 l
478.020 367.068 l
478.020 371.632 l
479.531 371.632 l
479.531 364.762 l
478.378 364.762 l
472.563 369.391 l
472.563 364.762 l
471.036 364.762 l
471.036 371.632 l
f
484.758 370.365 m
484.758 366.077 l
489.273 366.077 l
489.273 367.539 l
490.962 367.198 l
490.962 366.386 l
490.962 365.103 490.523 364.762 489.159 364.762 c
484.871 364.762 l
483.491 364.762 483.085 365.119 483.085 366.386 c
483.085 370.008 l
483.085 371.291 483.507 371.632 484.871 371.632 c
489.159 371.632 l
490.523 371.632 490.962 371.307 490.962 370.008 c
490.962 369.342 l
489.273 369.098 l
489.273 370.365 l
484.758 370.365 l
f
494.348 371.632 m
501.721 371.632 l
501.721 370.414 l
496.037 370.414 l
496.037 368.920 l
499.350 368.920 l
499.350 367.734 l
496.037 367.734 l
496.037 366.045 l
501.802 366.045 l
501.802 364.762 l
494.348 364.762 l
494.348 371.632 l
f
*u
247.904 353.597 m
255.082 353.597 l
256.365 353.597 256.966 353.143 256.966 351.973 c
256.966 350.950 l
256.966 350.138 256.447 349.651 255.521 349.537 c
256.495 349.407 257.031 348.822 257.031 347.929 c
257.031 346.857 l
257.031 345.737 256.203 345.217 254.563 345.217 c
247.904 345.217 l
247.904 353.597 l
f
249.820 348.855 m
249.820 346.727 l
254.270 346.727 l
254.936 346.727 255.212 346.857 255.212 347.474 c
255.212 348.108 l
255.212 348.725 254.936 348.855 254.270 348.855 c
249.820 348.855 l
f
249.820 352.233 m
249.820 350.235 l
254.270 350.235 l
254.871 350.235 255.164 350.349 255.164 350.836 c
255.164 351.632 l
255.164 352.120 254.871 352.233 254.270 352.233 c
249.820 352.233 l
f
*U
260.834 352.087 m
268.207 352.087 l
268.207 350.869 l
262.523 350.869 l
262.523 349.375 l
265.836 349.375 l
265.836 348.189 l
262.523 348.189 l
262.523 346.500 l
268.289 346.500 l
268.289 345.217 l
260.834 345.217 l
260.834 352.087 l
f
*u
271.351 352.087 m
277.539 352.087 l
278.643 352.087 279.147 351.714 279.147 350.755 c
279.147 349.131 l
279.147 348.189 278.643 347.815 277.539 347.815 c
276.597 347.815 l
279.862 345.217 l
277.458 345.217 l
274.583 347.815 l
273.008 347.815 l
273.008 345.217 l
271.351 345.217 l
271.351 352.087 l
f
273.008 350.901 m
273.008 349.001 l
276.824 349.001 l
277.328 349.001 277.588 349.099 277.588 349.553 c
277.588 350.349 l
277.588 350.804 277.328 350.901 276.824 350.901 c
273.008 350.901 l
f
*U
282.566 352.087 m
284.255 352.087 l
284.255 349.310 l
288.267 352.087 l
290.687 352.087 l
285.944 348.904 l
291.223 345.217 l
288.576 345.217 l
284.255 348.319 l
284.255 345.217 l
282.566 345.217 l
282.566 352.087 l
f
293.294 352.087 m
300.667 352.087 l
300.667 350.869 l
294.983 350.869 l
294.983 349.375 l
298.296 349.375 l
298.296 348.189 l
294.983 348.189 l
294.983 346.500 l
300.749 346.500 l
300.749 345.217 l
293.294 345.217 l
293.294 352.087 l
f
303.811 352.087 m
305.500 352.087 l
305.500 346.500 l
310.892 346.500 l
310.892 345.217 l
303.811 345.217 l
303.811 352.087 l
f
313.428 352.087 m
320.802 352.087 l
320.802 350.869 l
315.117 350.869 l
315.117 349.375 l
318.430 349.375 l
318.430 348.189 l
315.117 348.189 l
315.117 346.500 l
320.883 346.500 l
320.883 345.217 l
313.428 345.217 l
313.428 352.087 l
f
326.544 348.303 m
322.792 352.087 l
325.049 352.087 l
327.502 349.521 l
329.987 352.087 l
331.952 352.087 l
328.217 348.335 l
328.217 345.217 l
326.544 345.217 l
326.544 348.303 l
f
341.749 353.597 m
343.081 353.597 l
348.977 348.660 l
349.318 348.384 349.643 348.092 349.935 347.751 C
349.886 348.449 349.854 348.936 349.854 349.196 c
349.854 353.597 l
351.608 353.597 l
351.608 345.217 l
350.276 345.217 l
344.121 350.398 l
343.877 350.609 343.650 350.820 343.422 351.080 C
343.487 350.430 343.503 349.992 343.503 349.748 c
343.503 345.217 l
341.749 345.217 l
341.749 353.597 l
f
*u
358.954 352.087 m
360.562 352.087 l
364.704 345.217 l
362.820 345.217 l
361.959 346.727 l
357.411 346.727 l
356.551 345.217 l
354.878 345.217 l
358.954 352.087 l
f
361.277 347.978 m
359.669 350.836 l
358.126 347.978 l
361.277 347.978 l
f
*U
371.150 345.217 m
369.477 345.217 l
369.477 350.853 l
366.164 350.853 l
366.164 352.087 l
374.479 352.087 l
374.479 350.853 l
371.150 350.853 l
371.150 345.217 l
f
377.293 352.087 m
378.966 352.087 l
378.966 345.217 l
377.293 345.217 l
377.293 352.087 l
f
*u
384.294 352.087 m
389.605 352.087 l
390.953 352.087 391.392 351.778 391.392 350.463 c
391.392 346.841 l
391.392 345.542 390.953 345.217 389.605 345.217 c
384.294 345.217 l
382.930 345.217 382.508 345.542 382.508 346.841 c
382.508 350.463 l
382.508 351.778 382.946 352.087 384.294 352.087 c
f
389.719 346.532 m
389.719 350.820 l
384.181 350.820 l
384.181 346.532 l
389.719 346.532 l
f
*U
394.936 352.087 m
396.090 352.087 l
401.920 347.523 l
401.920 352.087 l
403.431 352.087 l
403.431 345.217 l
402.277 345.217 l
396.463 349.846 l
396.463 345.217 l
394.936 345.217 l
394.936 352.087 l
f
*u
410.184 352.087 m
411.792 352.087 l
415.934 345.217 l
414.050 345.217 l
413.189 346.727 l
408.641 346.727 l
407.780 345.217 l
406.108 345.217 l
410.184 352.087 l
f
412.507 347.978 m
410.899 350.836 l
409.356 347.978 l
412.507 347.978 l
f
*U
418.287 352.087 m
419.976 352.087 l
419.976 346.500 l
425.368 346.500 l
425.368 345.217 l
418.287 345.217 l
418.287 352.087 l
f
435.449 353.597 m
437.398 353.597 l
437.398 346.792 l
443.684 346.792 l
443.684 345.217 l
435.449 345.217 l
435.449 353.597 l
f
*u
449.612 352.087 m
451.220 352.087 l
455.361 345.217 l
453.477 345.217 l
452.616 346.727 l
448.069 346.727 l
447.208 345.217 l
445.535 345.217 l
449.612 352.087 l
f
451.934 347.978 m
450.326 350.836 l
448.784 347.978 l
451.934 347.978 l
f
*U
*u
457.715 352.087 m
463.886 352.087 l
464.991 352.087 465.510 351.730 465.510 350.755 c
465.510 349.927 l
465.510 349.294 465.088 348.887 464.341 348.758 c
465.121 348.628 465.559 348.140 465.559 347.442 c
465.559 346.565 l
465.559 345.655 464.845 345.217 463.432 345.217 c
457.715 345.217 l
457.715 352.087 l
f
459.371 348.205 m
459.371 346.451 l
463.123 346.451 l
463.691 346.451 463.935 346.565 463.935 347.068 c
463.935 347.588 l
463.935 348.092 463.691 348.205 463.123 348.205 c
459.371 348.205 l
f
459.371 350.966 m
459.371 349.342 l
463.123 349.342 l
463.626 349.342 463.870 349.423 463.870 349.829 c
463.870 350.479 l
463.870 350.885 463.643 350.966 463.123 350.966 c
459.371 350.966 l
f
*U
*u
470.665 352.087 m
475.976 352.087 l
477.324 352.087 477.763 351.778 477.763 350.463 c
477.763 346.841 l
477.763 345.542 477.324 345.217 475.976 345.217 c
470.665 345.217 l
469.301 345.217 468.878 345.542 468.878 346.841 c
468.878 350.463 l
468.878 351.778 469.317 352.087 470.665 352.087 c
f
476.090 346.532 m
476.090 350.820 l
470.551 350.820 l
470.551 346.532 l
476.090 346.532 l
f
*U
*u
481.307 352.087 m
487.495 352.087 l
488.600 352.087 489.103 351.714 489.103 350.755 c
489.103 349.131 l
489.103 348.189 488.600 347.815 487.495 347.815 c
486.553 347.815 l
489.818 345.217 l
487.414 345.217 l
484.539 347.815 l
482.964 347.815 l
482.964 345.217 l
481.307 345.217 l
481.307 352.087 l
f
482.964 350.901 m
482.964 349.001 l
486.781 349.001 l
487.284 349.001 487.544 349.099 487.544 349.553 c
487.544 350.349 l
487.544 350.804 487.284 350.901 486.781 350.901 c
482.964 350.901 l
f
*U
*u
495.560 352.087 m
497.167 352.087 l
501.309 345.217 l
499.425 345.217 l
498.564 346.727 l
494.017 346.727 l
493.156 345.217 l
491.483 345.217 l
495.560 352.087 l
f
497.882 347.978 m
496.274 350.836 l
494.731 347.978 l
497.882 347.978 l
f
*U
507.755 345.217 m
506.082 345.217 l
506.082 350.853 l
502.769 350.853 l
502.769 352.087 l
511.085 352.087 l
511.085 350.853 l
507.755 350.853 l
507.755 345.217 l
f
*u
515.522 352.087 m
520.833 352.087 l
522.181 352.087 522.620 351.778 522.620 350.463 c
522.620 346.841 l
522.620 345.542 522.181 345.217 520.833 345.217 c
515.522 345.217 l
514.158 345.217 513.736 345.542 513.736 346.841 c
513.736 350.463 l
513.736 351.778 514.174 352.087 515.522 352.087 c
f
520.947 346.532 m
520.947 350.820 l
515.409 350.820 l
515.409 346.532 l
520.947 346.532 l
f
*U
*u
526.164 352.087 m
532.352 352.087 l
533.457 352.087 533.960 351.714 533.960 350.755 c
533.960 349.131 l
533.960 348.189 533.457 347.815 532.352 347.815 c
531.410 347.815 l
534.675 345.217 l
532.271 345.217 l
529.396 347.815 l
527.821 347.815 l
527.821 345.217 l
526.164 345.217 l
526.164 352.087 l
f
527.821 350.901 m
527.821 349.001 l
531.638 349.001 l
532.141 349.001 532.401 349.099 532.401 349.553 c
532.401 350.349 l
532.401 350.804 532.141 350.901 531.638 350.901 c
527.821 350.901 l
f
*U
539.978 348.303 m
536.226 352.087 l
538.484 352.087 l
540.936 349.521 l
543.421 352.087 l
545.387 352.087 l
541.651 348.335 l
541.651 345.217 l
539.978 345.217 l
539.978 348.303 l
f
219.187 410.621 m
212.666 426.470 l
207.306 414.512 l
207.306 415.543 l
212.975 429.898 l
219.805 413.507 l
219.187 410.621 l
f
195.029 345.607 m
195.029 359.717 l
67.420 359.717 l
67.420 345.607 l
195.029 345.607 l
f
*u
0.000 0.000 0.000 0.000 k
71.490 356.899 m
78.791 356.899 l
80.095 356.899 80.706 356.437 80.706 355.248 c
80.706 354.207 l
80.706 353.381 80.178 352.886 79.236 352.770 c
80.227 352.638 80.772 352.044 80.772 351.135 c
80.772 350.045 l
80.772 348.906 79.930 348.377 78.262 348.377 c
71.490 348.377 l
71.490 356.899 l
f
73.439 352.077 m
73.439 349.913 l
77.965 349.913 l
78.642 349.913 78.923 350.045 78.923 350.673 c
78.923 351.317 l
78.923 351.945 78.642 352.077 77.965 352.077 c
73.439 352.077 l
f
73.439 355.512 m
73.439 353.481 l
77.965 353.481 l
78.576 353.481 78.873 353.596 78.873 354.092 c
78.873 354.901 l
78.873 355.396 78.576 355.512 77.965 355.512 c
73.439 355.512 l
f
*U
83.767 355.363 m
91.266 355.363 l
91.266 354.125 l
85.485 354.125 l
85.485 352.605 l
88.854 352.605 l
88.854 351.400 l
85.485 351.400 l
85.485 349.682 l
91.348 349.682 l
91.348 348.377 l
83.767 348.377 l
83.767 355.363 l
f
*u
94.072 355.363 m
100.365 355.363 l
101.488 355.363 102.000 354.984 102.000 354.009 c
102.000 352.357 l
102.000 351.400 101.488 351.020 100.365 351.020 c
99.407 351.020 l
102.727 348.377 l
100.282 348.377 l
97.359 351.020 l
95.757 351.020 l
95.757 348.377 l
94.072 348.377 l
94.072 355.363 l
f
95.757 354.158 m
95.757 352.225 l
99.638 352.225 l
100.150 352.225 100.415 352.324 100.415 352.787 c
100.415 353.596 l
100.415 354.059 100.150 354.158 99.638 354.158 c
95.757 354.158 l
f
*U
104.915 355.363 m
106.633 355.363 l
106.633 352.539 l
110.713 355.363 l
113.174 355.363 l
108.351 352.126 l
113.719 348.377 l
111.026 348.377 l
106.633 351.532 l
106.633 348.377 l
104.915 348.377 l
104.915 355.363 l
f
115.572 355.363 m
123.070 355.363 l
123.070 354.125 l
117.289 354.125 l
117.289 352.605 l
120.659 352.605 l
120.659 351.400 l
117.289 351.400 l
117.289 349.682 l
123.153 349.682 l
123.153 348.377 l
115.572 348.377 l
115.572 355.363 l
f
125.980 355.363 m
127.698 355.363 l
127.698 349.682 l
133.181 349.682 l
133.181 348.377 l
125.980 348.377 l
125.980 355.363 l
f
135.215 355.363 m
142.714 355.363 l
142.714 354.125 l
136.933 354.125 l
136.933 352.605 l
140.302 352.605 l
140.302 351.400 l
136.933 351.400 l
136.933 349.682 l
142.796 349.682 l
142.796 348.377 l
135.215 348.377 l
135.215 355.363 l
f
148.137 351.515 m
144.322 355.363 l
146.618 355.363 l
149.112 352.754 l
151.639 355.363 l
153.637 355.363 l
149.838 351.548 l
149.838 348.377 l
148.137 348.377 l
148.137 351.515 l
f
161.466 356.899 m
163.448 356.899 l
163.448 349.979 l
169.839 349.979 l
169.839 348.377 l
161.466 348.377 l
161.466 356.899 l
f
*u
175.887 355.363 m
177.522 355.363 l
181.734 348.377 l
179.818 348.377 l
178.943 349.913 l
174.318 349.913 l
173.443 348.377 l
171.742 348.377 l
175.887 355.363 l
f
178.249 351.185 m
176.614 354.092 l
175.045 351.185 l
178.249 351.185 l
f
*U
*u
183.474 355.363 m
189.750 355.363 l
190.874 355.363 191.402 355.000 191.402 354.009 c
191.402 353.167 l
191.402 352.523 190.973 352.110 190.213 351.978 c
191.006 351.845 191.452 351.350 191.452 350.640 c
191.452 349.748 l
191.452 348.823 190.725 348.377 189.288 348.377 c
183.474 348.377 l
183.474 355.363 l
f
185.159 351.416 m
185.159 349.632 l
188.974 349.632 l
189.552 349.632 189.800 349.748 189.800 350.260 c
189.800 350.789 l
189.800 351.300 189.552 351.416 188.974 351.416 c
185.159 351.416 l
f
185.159 354.224 m
185.159 352.572 l
188.974 352.572 l
189.486 352.572 189.734 352.655 189.734 353.068 c
189.734 353.728 l
189.734 354.141 189.503 354.224 188.974 354.224 c
185.159 354.224 l
f
*U
0.000 0.000 0.000 1.000 k
168.778 406.834 m
174.112 407.783 L
173.071 408.164 171.896 408.417 170.699 408.503 c
170.706 408.507 170.706 408.507 v
170.701 408.509 170.692 408.506 170.683 408.506 c
167.890 408.701 164.972 407.982 163.339 405.810 C
163.271 403.134 162.749 400.480 162.953 397.781 C
168.306 398.734 L
168.102 401.410 168.464 404.041 168.759 406.740 C
168.759 406.773 168.772 406.803 168.778 406.834 c
f
153.492 407.083 m
158.826 408.033 L
157.786 408.413 156.611 408.666 155.413 408.752 c
155.420 408.756 155.420 408.756 v
155.415 408.758 155.406 408.755 155.398 408.755 c
152.604 408.950 149.686 408.231 148.053 406.060 C
147.985 403.383 147.463 400.730 147.667 398.031 C
153.020 398.984 L
152.816 401.660 153.178 404.290 153.473 406.989 C
153.473 407.022 153.486 407.052 153.492 407.083 c
f
138.410 406.970 m
143.744 407.919 L
142.704 408.300 141.529 408.553 140.331 408.639 c
140.338 408.643 140.338 408.643 v
140.333 408.645 140.325 408.642 140.316 408.642 c
137.522 408.837 134.604 408.118 132.971 405.946 C
132.903 403.270 132.381 400.616 132.586 397.918 C
137.938 398.870 L
137.734 401.546 138.097 404.177 138.391 406.876 C
138.391 406.909 138.404 406.939 138.410 406.970 c
f
122.790 406.970 m
128.123 407.919 L
127.083 408.300 125.908 408.553 124.710 408.639 c
124.718 408.643 124.718 408.643 v
124.713 408.645 124.704 408.642 124.695 408.642 c
121.901 408.837 118.983 408.118 117.351 405.946 C
117.283 403.270 116.761 400.616 116.965 397.918 C
122.317 398.870 L
122.113 401.546 122.476 404.177 122.771 406.876 C
122.771 406.909 122.783 406.939 122.790 406.970 c
f
107.484 406.731 m
112.818 407.680 L
111.778 408.061 110.603 408.314 109.405 408.400 c
109.412 408.404 109.412 408.404 v
109.407 408.406 109.398 408.402 109.390 408.402 c
106.596 408.598 103.678 407.879 102.045 405.707 C
101.977 403.031 101.455 400.377 101.659 397.678 C
107.012 398.631 L
106.808 401.307 107.170 403.938 107.465 406.637 C
107.465 406.669 107.478 406.700 107.484 406.731 c
f
92.198 406.980 m
97.532 407.930 L
96.492 408.310 95.317 408.563 94.119 408.649 c
94.126 408.653 94.126 408.653 v
94.121 408.655 94.112 408.652 94.104 408.652 c
91.310 408.847 88.392 408.128 86.759 405.956 C
86.691 403.280 86.169 400.627 86.373 397.928 C
91.726 398.880 L
91.522 401.557 91.885 404.187 92.179 406.886 C
92.179 406.919 92.192 406.949 92.198 406.980 c
f
77.116 406.867 m
82.450 407.816 L
81.410 408.197 80.235 408.450 79.037 408.536 c
79.044 408.540 79.044 408.540 v
79.039 408.542 79.031 408.539 79.022 408.539 c
76.228 408.734 73.310 408.015 71.677 405.843 C
71.609 403.167 71.088 400.513 71.292 397.815 C
76.644 398.767 L
76.440 401.443 76.803 404.074 77.098 406.773 C
77.098 406.806 77.110 406.836 77.116 406.867 c
f
70.775 388.930 m
103.334 392.125 137.026 394.410 168.416 382.487 c
183.312 376.834 195.253 367.453 208.414 357.711 c
221.506 348.021 223.654 345.607 238.773 345.607 c
223.654 343.683 218.018 346.750 204.926 356.440 c
191.765 366.182 179.842 375.545 164.928 381.215 c
133.573 393.139 99.846 390.871 67.305 387.658 c
70.775 388.930 l
f
106.289 442.140 m
116.117 446.504 l
125.566 441.366 l
125.669 439.631 l
128.607 441.521 l
128.796 443.634 l
119.793 448.737 l
106.289 442.140 l
f
218.429 406.943 m
218.429 403.387 218.429 399.830 218.429 396.274 c
218.429 395.616 217.887 395.036 217.192 395.036 c
216.496 395.036 215.954 395.616 215.954 396.274 c
215.954 399.830 215.954 403.387 215.954 406.943 c
215.954 407.639 216.496 408.180 217.192 408.180 c
217.887 408.180 218.429 407.639 218.429 406.943 c
f
214.099 406.995 m
214.099 403.438 214.099 399.882 214.099 396.325 c
214.099 395.668 213.558 395.088 212.862 395.088 c
212.166 395.088 211.625 395.668 211.625 396.325 c
211.625 399.882 211.625 403.438 211.625 406.995 c
211.625 407.690 212.166 408.232 212.862 408.232 c
213.558 408.232 214.099 407.690 214.099 406.995 c
f
209.563 406.969 m
209.563 403.412 209.563 399.856 209.563 396.299 c
209.563 395.642 209.022 395.062 208.326 395.062 c
207.630 395.062 207.089 395.642 207.089 396.299 c
207.089 399.856 207.089 403.412 207.089 406.969 c
207.089 407.665 207.630 408.206 208.326 408.206 c
209.022 408.206 209.563 407.665 209.563 406.969 c
f
222.897 352.067 m
222.914 409.873 l
221.604 413.997 l
220.295 409.873 l
220.312 353.579 l
222.897 352.067 l
f
205.330 363.476 m
205.330 409.873 l
204.505 413.791 l
203.680 409.873 l
203.681 365.400 l
205.330 363.476 l
f
219.187 410.621 m
212.666 426.470 l
207.306 414.512 l
207.306 415.543 l
212.975 429.898 l
219.805 413.507 l
219.187 410.621 l
f
76.798 428.344 m
75.825 427.863 75.074 427.423 74.494 427.020 c
75.320 427.534 76.798 428.344 v
f
175.130 415.257 m
167.236 424.204 154.970 432.300 137.604 436.542 c
117.916 441.351 103.363 438.596 92.742 435.189 c
85.606 432.900 79.826 430.001 76.798 428.344 c
79.503 429.681 83.941 431.342 91.314 433.461 c
141.662 447.926 172.879 412.356 y
180.224 412.356 l
180.224 381.627 l
183.213 379.548 l
183.213 415.257 l
175.130 415.257 l
f
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI5 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
